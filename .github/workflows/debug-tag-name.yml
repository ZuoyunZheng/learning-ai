name: Debug Tag Name

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create new release'
        required: true
        type: boolean

permissions:
  contents: write # for creating release

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  debug-tag-name:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
          #with:
          #fetch-depth: 0
      
      - name: Debug Git Info
        id: git_info
        run: |
          echo "Current branch: ${{ env.BRANCH_NAME }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          
          BUILD_NUMBER=$(git rev-list --count HEAD)
          SHORT_HASH=$(git rev-parse --short=7 HEAD)
          
          echo "Build number (commit count): $BUILD_NUMBER"
          echo "Short hash: $SHORT_HASH"
          
          # Set for later steps
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "short_hash=$SHORT_HASH" >> $GITHUB_ENV
      
      - name: Determine tag name
        id: tag
        shell: bash
        run: |
          BUILD_NUMBER="${{ env.build_number }}"
          SHORT_HASH="${{ env.short_hash }}"
          
          echo "Raw values:"
          echo "BUILD_NUMBER: $BUILD_NUMBER"
          echo "SHORT_HASH: $SHORT_HASH"
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          
          if [[ "${{ env.BRANCH_NAME }}" == "master" || "${{ env.BRANCH_NAME }}" == "main" ]]; then
            echo "Using master/main branch format"
            TAG_NAME="b${BUILD_NUMBER}"
          else
            echo "Using non-master branch format"
            SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
            TAG_NAME="${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}"
          fi
          
          echo "Final tag name: $TAG_NAME"
          echo "name=$TAG_NAME" >> $GITHUB_OUTPUT
      
      - name: Test output
        run: |
          echo "The tag name is: ${{ steps.tag.outputs.name }}"
          
          # Create a test file
          echo "Test content" > test-file.txt
          
          # Create a zip file with the tag name
          zip -r llama-${{ steps.tag.outputs.name }}-test.zip test-file.txt
          
          # List the zip file to verify name
          ls -la *.zip
      
      - name: Upload test artifact
        if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: llama-${{ steps.tag.outputs.name }}-test
          path: llama-${{ steps.tag.outputs.name }}-test.zip

  release:
    if: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/master' ) || github.event.inputs.create_release == 'true' }}

    runs-on: ubuntu-latest

    needs:
      - debug-tag-name:

    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2.16
        with:
          key: release
          evict-old-files: 1d

      - name: Determine tag name
        id: tag
        shell: bash
        run: |
          BUILD_NUMBER="$(git rev-list --count HEAD)"
          SHORT_HASH="$(git rev-parse --short=7 HEAD)"
          if [[ "${{ env.BRANCH_NAME }}" == "master" ]]; then
            echo "name=b${BUILD_NUMBER}" >> $GITHUB_OUTPUT
          else
            SAFE_NAME=$(echo "${{ env.BRANCH_NAME }}" | tr '/' '-')
            echo "name=${SAFE_NAME}-b${BUILD_NUMBER}-${SHORT_HASH}" >> $GITHUB_OUTPUT
          fi

      # Downloads all the artifacts from the previous jobs
      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: ./artifact

      - name: Move artifacts
        id: move_artifacts
        run: mkdir -p ./artifact/release && mv ./artifact/*/*.zip ./artifact/release

      - name: Create release
        id: create_release
        uses: ggml-org/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.name }}

      - name: Upload release
        id: upload_release
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const path = require('path');
            const fs = require('fs');
            const release_id = '${{ steps.create_release.outputs.id }}';
            for (let file of await fs.readdirSync('./artifact/release')) {
              if (path.extname(file) === '.zip') {
                console.log('uploadReleaseAsset', file);
                await github.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release_id,
                  name: file,
                  data: await fs.readFileSync(`./artifact/release/${file}`)
                });
              }
            }
